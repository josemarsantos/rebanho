# -*- coding: utf-8 -*-
"""REBANHO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12QZ97hRa0SBXK7J-MSW9-U3MIP1quh4o
"""

#Importando as bibliotecas necessárias e carregando o arquivo

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_excel('/content/RebanhoN7.xlsx')

"""Quantidade de animais por fazenda"""

animais_por_fazenda = df.groupby('Nome Fazenda').size().reset_index(name='Quantidade de animais')
print(animais_por_fazenda)

animais_por_sexo = df.groupby('Sexo').size().reset_index(name='Quantidade de animais')
print(animais_por_sexo)

animais_por_raca = df.groupby('Raça').size().reset_index(name='Quantidade de animais')
print(animais_por_raca)

relacionamento_animais = df[['Nome Animal', 'Nome Completo', 'Nome Completo Mãe', 'Nome Completo Pai']]
print(relacionamento_animais)

tempo_medio_espera = df['Qtd. Dias Espera'].mean()
print(f"Tempo médio de espera para o abate: {tempo_medio_espera} dias")

animais_abatidos = df[df['Situação'] == 'ABATIDO']
proporcao_abatidos = len(animais_abatidos) / len(df) * 100
print(f"Proporção de animais abatidos: {proporcao_abatidos:.2f}%")

# Importar bibliotecas
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Carregar o arquivo
rebanho = pd.read_excel('/content/RebanhoN7.xlsx')

# Contar a quantidade de animais por categoria e por fazenda
qtd_animais = rebanho.groupby(['Nome Fazenda', 'Categoria'])['QTDEANIMAL'].sum().reset_index()

# Plotar o gráfico de barras
plt.figure(figsize=(8,6))
sns.barplot(x='Categoria', y='QTDEANIMAL', hue='Nome Fazenda', data=qtd_animais)
plt.title('Quantidade de animais por categoria em cada fazenda')
plt.show()

# Contar a quantidade de animais por categoria e por fazenda
qtd_animais = rebanho.groupby(['Nome Fazenda', 'Categoria'])['QTDEANIMAL'].sum().reset_index()

# Plotar o gráfico de barras
plt.figure(figsize=(20,10))
plt.subplots_adjust(bottom=0.2)
plt.xticks(rotation=50)
sns.barplot(x='Categoria', y='QTDEANIMAL', hue='Nome Fazenda', data=qtd_animais)
plt.title('Quantidade de animais por categoria em cada fazenda')
plt.legend(bbox_to_anchor=(0.5, -0.3), ncol=3)
plt.show()

# Agrupar os dados por fazenda e categoria, somando a quantidade de animais
qtd_animais = rebanho.groupby(['Nome Fazenda', 'Categoria'])['QTDEANIMAL'].sum().reset_index()

# Pivotar os dados para criar as colunas de cada categoria
qtd_animais_pivot = qtd_animais.pivot(index='Nome Fazenda', columns='Categoria', values='QTDEANIMAL')

# Plotar o gráfico de barras empilhadas
qtd_animais_pivot.plot(kind='bar', stacked=True, figsize=(12,8))

# Adicionar título e legendas
plt.title('Quantidade de animais por categoria em cada fazenda')
plt.xlabel('Fazenda')
plt.ylabel('Quantidade de animais')
plt.legend(title='Categoria', loc='center left', bbox_to_anchor=(1.0, 0.5))
plt.show()

# Agrupar por fazenda e categoria e contar a quantidade de animais
qtd_animais = rebanho.groupby(['Nome Fazenda', 'Categoria'])['QTDEANIMAL'].sum().reset_index()

# Reorganizar os dados em formato de tabela pivot
qtd_animais_pivot = qtd_animais.pivot(index='Categoria', columns='Nome Fazenda', values='QTDEANIMAL')

# Plotar o gráfico de barras empilhadas
plt.figure(figsize=(12,8))
qtd_animais_pivot.plot(kind='bar', stacked=True)
plt.title('Distribuição de animais por categoria em cada fazenda')
plt.xlabel('Categoria')
plt.ylabel('Quantidade de animais')
plt.show()

# Agrupar por fazenda e sexo
qtd_animais = rebanho.groupby(['Nome Fazenda', 'Sexo'])['QTDEANIMAL'].sum().reset_index()

# Criar a figura
plt.figure(figsize=(10,6))

# Plotar o gráfico de barras
sns.barplot(x='Nome Fazenda', y='QTDEANIMAL', hue='Sexo', data=qtd_animais)

# Adicionar título e legenda
plt.title('Quantidade de animais por sexo em cada fazenda')
plt.legend(title='Sexo', bbox_to_anchor=(1.01, 1), loc='upper left')

# Ajustar a posição da legenda
plt.tight_layout()

# Exibir o gráfico
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt

# Agrupar por fazenda e sexo e somar a quantidade de animais
qtd_animais = rebanho.groupby(['Nome Fazenda', 'Sexo'])['QTDEANIMAL'].sum().reset_index()

# Pivotar a tabela para ter as fazendas como linhas e os sexos como colunas
qtd_animais = qtd_animais.pivot(index='Nome Fazenda', columns='Sexo', values='QTDEANIMAL')

# Plotar o heatmap com a escala de cores em azul
sns.heatmap(qtd_animais, cmap='Blues')
plt.title('Quantidade de animais por sexo em cada fazenda')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Ler o arquivo excel
rebanho = pd.read_excel('/content/RebanhoN7.xlsx')

# Contar a quantidade de animais por sexo e por fazenda
qtd_animais = rebanho.groupby(['Nome Fazenda', 'Sexo'])['QTDEANIMAL'].sum().reset_index()

# Ordenar as fazendas por ordem crescente
fazendas = sorted(qtd_animais['Nome Fazenda'].unique())

# Criar um dicionário de cores para as fazendas
cores = {'Fazenda Bonito': '#1f77b4',
         'Fazenda Santa Clara': '#ff7f0e',
         'Fazenda Santa Maria': '#2ca02c',
         'Fazenda São João': '#d62728',
         'Fazenda São José': '#9467bd',
         'Fazenda São Lucas': '#8c564b',
         'Fazenda São Mateus': '#e377c2',
         'Fazenda São Paulo': '#7f7f7f'}

# Criar uma figura
plt.figure(figsize=(12, 8))

# Plotar as barras empilhadas
sns.barplot(x='Nome Fazenda', y='QTDEANIMAL', hue='Sexo', data=qtd_animais, palette=['#1f77b4', '#ff7f0e'])

# Adicionar o número de animais em cima de cada barra
for fazenda in fazendas:
    sub_df = qtd_animais[qtd_animais['Nome Fazenda']==fazenda]
    m = sub_df[sub_df['Sexo']=='M']['QTDEANIMAL'].values[0]
    f = sub_df[sub_df['Sexo']=='F']['QTDEANIMAL'].values[0]
    plt.text(fazendas.index(fazenda)-0.2, m/2, str(m), fontsize=12, fontweight='bold', color='white')
    plt.text(fazendas.index(fazenda)-0.2, m+f/2, str(f), fontsize=12, fontweight='bold', color='white')

# Personalizar o gráfico
plt.title('Quantidade de animais por sexo e por fazenda', fontsize=16)
plt.xlabel('Fazenda', fontsize=14)
plt.ylabel('Quantidade de animais', fontsize=14)
plt.xticks(rotation=45, ha='right', fontsize=12)
plt.yticks(fontsize=12)
plt.legend(title='Sexo', fontsize=12)

# Exibir o gráfico
plt.show()

# Converter a coluna 'Nome Fazenda' para string
rebanho['Nome Fazenda'] = rebanho['Nome Fazenda'].astype(str)

# Contar a quantidade de animais por sexo e por fazenda
qtd_animais = rebanho.groupby(['Nome Fazenda', 'Sexo'])['QTDEANIMAL'].sum().reset_index()

# Ordenar as fazendas por ordem crescente
fazendas = sorted(qtd_animais['Nome Fazenda'].unique())

# Criar um dicionário de cores para as fazendas
cores = {fazenda: 'blue' for fazenda }

# Plotar o gráfico de barras
plt.figure(figsize=(12,8))
sns.barplot(x='Sexo', y='QTDEANIMAL', hue='Nome Fazenda', data=qtd_animais, palette=cores)
plt.title('Quantidade de animais por sexo em cada fazenda')
plt.xlabel('Sexo')
plt.ylabel('Quantidade')
plt.show()

print(rebanho[~rebanho['QTDEANIMAL'].astype(str).str.isdigit()]['QTDEANIMAL'])

rebanho['QTDEANIMAL'] = rebanho['QTDEANIMAL'].fillna(0).astype(int)

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Carregar o dataset
rebanho = pd.read_excel('/content/RebanhoN7.xlsx')

# Contar a quantidade de animais por fazenda e por sexo
qtd_animais = rebanho.groupby(['Nome Fazenda', 'Sexo'])['QTDEANIMAL'].sum().reset_index()

# Ordenar as fazendas por ordem crescente
fazendas = sorted(qtd_animais['Nome Fazenda'].unique(), key=str.lower)

# Criar uma paleta de cores para as fazendas
cores = sns.color_palette('husl', n_colors=len(fazendas))

# Criar o gráfico de barras
plt.figure(figsize=(12, 8))
sns.barplot(x='Nome Fazenda', y='QTDEANIMAL', hue='Sexo', data=qtd_animais, palette=cores)
plt.xlabel('Fazenda')
plt.ylabel('Quantidade de Animais')
plt.title('Quantidade de Animais por Fazenda e Sexo')
plt.legend(loc='upper right')
plt.show()

!pip install openai
import os
import openai
openai.organization = "YOUR_ORG_ID"
openai.api_key = os.getenv("OPENAI_API_KEY")
openai.Model.list()

import openai
import os

openai.api_key = os.getenv("OPENAI_API_KEY")

model_engine = "text-davinci-002"
prompt = "Hello, World!"
completions = openai.Completion.create(
    engine=model_engine,
    prompt=prompt,
    max_tokens=5
)

message = completions.choices[0].text.strip()
print(message)